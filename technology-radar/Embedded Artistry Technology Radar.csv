name,ring,quadrant,isNew,description
clang-format,adopt,tools,FALSE,"Automate the code formatting for your project using <a href=""https://embeddedartistry.com/blog/2017/10/23/creating-and-enforcing-a-coding-standard-with-clang-format?rq=clang-format"">clang-format</a>. Eliminate disagreements and ensure that code follows the same guidelines automatically. No more bickering about formatting during code reviews!"
Clang Analyzer,adopt,tools,FALSE,"Clang analyzer (aka scan-build) is clang's built-in static analyzer. See the <a href=""http://clang-analyzer.llvm.org/available_checks.html"">list of checks</a> that are supported. We utilize the <a href=""http://mesonbuild.com"">Meson build system<a>, which has built-in clang-analyzer hooks."
GitNStats,adopt,tools,FALSE,"<a href=""https://github.com/rubberduck203/GitNStats"">GitNStats</a> provides metrics for source-file churn. We use this tool to identify hot-spots in our code that frequently change. Frequent modifications can be a sign that you have a problematic piece of code that deserves attention, refactoring, or redesign."
Jenkins (Declarative Pipelines),adopt,tools,FALSE,"<a href=""https://jenkins.io"">Jenkins</a> is our CI server of choice, especially with <a href=""https://jenkins.io/doc/book/pipeline/"">Declarative Pipeline</a> mode enabled. We can re-use CI functionality between products using our <a href=""https://github.com/embeddedartistry/jenkins-pipeline-lib"">pipeline support library</a>."
Lizard,adopt,tools,FALSE,"The <a href=""https://github.com/terryyin/lizard"">Lizard</a> project is a complexity analysis tool for C/C++/Java. Provides NLOC, cyclomatic complexity, token count of functions, parameter count of functions. Limits can be provided for each metric, creating warnings for functions that exceed limits. This tool can be incorporated into a static analysis stage in a CI server. We have adopted it as another form of static analysis checks on our projects and block PRs if complexity becomes too great."
vale,adopt,tools,FALSE,"We are using <a href=""https://github.com/ValeLint/vale"">vale</a> to self-edit our documentation and articles. Vale provides prose linting and offers valuable feedback. We are in the process of creating <a href=""https://github.com/embeddedartistry/vale-styleguide"">style guides</a> to provide customized checking tailored to both our blog and our documentation. We have stopped using proselint because the same checks can be enabled in the vale tool."
Cppcheck,adopt,tools,FALSE,"<a href=""https://github.com/danmar/cppcheck"">CppCheck</a> is a static analysis tool for C & C++.  Here is the <a href=""https://sourceforge.net/p/cppcheck/wiki/ListOfChecks/"">list of checks</a> that CppCheck supports. We use CppCheck in combination with clang-analyze and clang-tidy primarily because CppCheck can be extended with custom rules support."
Clang Tidy,adopt,tools,FALSE,"<a href=""http://clang.llvm.org/extra/clang-tidy/"">clang-tidy</a> is Clang's C++-based linter tool. We have found and addressed many problems using clang-tidy. We also find the C++ modernization advice to be very helpful for improving the quality of our code. Clang-tidy is run as part of our regular CI workflow."
Doxygen,adopt,tools,FALSE,"While <a href=""http://www.stack.nl/~dimitri/doxygen/"">Doxygen</a> is not the easiest document generator in the world, it's currently the one with the most support. Unfortunately, it doesn't work well as a combined documentation engine with GitHub, since they do not support compatible Markdown linking styles. We stick with it because of its power and ability to create comprehensive documentation."
report.ci,adopt,tools,TRUE,"<a href=""https://report.ci"">report.ci</a> is a tool created by Klemens Morgenstern. This tool integrates with GitHub projects, allowing you to see test results (particularly failures) in line with the source code in a GitHub pull request. This enables us to see test failures in one place, rather than hunting through logs on our build server."
Clang Sanitizer,adopt,tools,TRUE,"After changing our embedded development strategy so that most of our code can run on a PC, we've been able to leverage the clang sanitizer suite to find and address problems quickly, including threading issues, use-after-free, and memory stomping bugs."
Valgrind,assess,tools,FALSE,"<a href=""http://valgrind.org"">Valgrind</a> is a popular tools used to detect memory leaks. We need to determine how easily it can be applied to our embedded workflow."
Mkdocs,assess,tools,FALSE,"<a href=""http://www.mkdocs.org"">mkdocs</a> is a tool for making prettier documentation, with themes available. Used by the <a href=""http://modm.io"">modm</a> project."
Breathe,assess,tools,FALSE,"<a href=""
https://github.com/michaeljones/breathe""> is a tool that helps make prettier Doxygen documentation."
metal.ci,hold,tools,FALSE,"The <a href=""http://metal.ci"">metal.ci</a> project promises to be a CI service supporting bare metal programs. This service is still under development."
foonathan/type_safe,adopt,libraries & frameworks,FALSE,"The <a href=""https://github.com/foonathan/type_safe"">type_safe</a> C++ library provides zero overhead utilities for preventing bugs at compile time. This includes improvement over standard types, improved vocabulary types, and support for strong types."
compiler_rt,adopt,libraries & frameworks,FALSE,"The <a href=""https://github.com/llvm-mirror/compiler-rt"">compiler_rt</a> project provides support for builtins and other typically non-portable functionality. We use this in our embedded projects."
Embedded Template Library,adopt,libraries & frameworks,FALSE,"The <a href=""https://www.etlcpp.com"">Embedded Template Library</a> (ETL) is a template library (complementary to the C++ STL) which is targeted for embedded systems. The ETL has become an essential part of our embedded framework thanks to the static STL container alternatives and other helpful constructs such as memory pools."
Catch,adopt,libraries & frameworks,FALSE,"<a href=""https://github.com/catchorg/Catch2"">Catch2</a> is a unit testing framework for C++. We moved from Doctest to Catch due to support for `-fno-exceptions`. Writing tests in headers (a reason for using Doctest) turned out not to be important for our uses cases."
mpaland/printf,adopt,libraries & frameworks,FALSE,"This <a href=""https://github.com/mpaland/printf"">printf</a> implementation is tiny, portable, and tested. We are trying this printf implementation in our <a href=""https://github.com/embeddedartistry/libc"">libc</a> for bare metal systems."
Trompeloeil,adopt,libraries & frameworks,FALSE,"<a href=""https://github.com/rollbear/trompeloeil"">Trompeloeil</a> is a C++14 header-only mock object library. We couple this library with Catch to support mock object testing for embedded libraries."
metal.test,trial,libraries & frameworks,FALSE,"The <a href=""https://github.com/klemens-morgenstern/metal.test"">metal.test</a> project provides hooks for testing bare metal programs using debug adapters. This may be a huge benefit to bare-metal CI and on-device testing support."
foonathan/debug_assert,trial,libraries & frameworks,FALSE,"<a href=""https://github.com/foonathan/debug_assert"">debug_assert</a> is a simple, C++11, header-only library that provides a very flexible DEBUG_ASSERT() macro. How many times did you write an assertion macro yourself, because assert() is controlled globally and cannot be enabled for certain parts of the program only? This library solves the problem by providing a flexible, modular assertion macro."
foonathan/memory,trial,libraries & frameworks,FALSE,"<a href=""https://foonathan.net/doc/memory/"">memory</a> provides an STL compatible C++ memory allocator library using a new RawAllocator concept that is similar to an Allocator but easier to use and write. We may be able to leverage this in our systems."
nanopb,trial,libraries & frameworks,FALSE,"<a href=""https://github.com/nanopb/nanopb"">nanopb</a> provides Google Protocol Buffers with small code size. This may be an excellent IDL/generation tool for embedded systems. Implemented in plain C and targeted at 32-bit microcontrollers. Some protobuf features may not be supported"
foonathan/array,assess,libraries & frameworks,FALSE,"The <a href=""https://github.com/foonathan/array"">array</a> C++ library focused on contiguous containers - arrays with customizable allocations, small buffer optimization and more. This library is still under development."
Liquid FPM,assess,libraries & frameworks,FALSE,"<a href=""https://github.com/jgaeddert/liquid-fpm"">liquid-fpm</a> is a fixed-point math library for embedded systems"
crect,assess,libraries & frameworks,FALSE,"<a href=""https://github.com/korken89/crect"">crect</a> is a C++, compile-time, reactive RTOS for the Stack Resource Policy based Real-Time For the Masses kernel. Do we need RTFM, or is the concept usable for our framework?"
constexpr-format,assess,libraries & frameworks,FALSE,"<a href=""https://github.com/SephDB/constexpr-format"">constexpr-format</a> is a C++ library which provides compile-time printf like stirng formatting. Perhaps this has a performance benefit for our embedded systems."
SaferC++,hold,libraries & frameworks,TRUE,"< href=""https://github.com/duneroadrunner/SaferCPlusPlus"">SaferCPlusPlus</a> provides drop-in replacements for C++ types which can help identify common bugs and misuse cases. These types can be disabled during compile-time, allowing for use during debugging without sacrificing performance during customer releases. However, we have put this on hold because so much of the library requires exceptions to use properly."
kvasir / mpl,hold,libraries & frameworks,FALSE,"The <a href=""https://github.com/kvasir-io/Kvasir/"">Kvasir</a> C++ project provides compile-time checking of SFR settings on a procesor. We may also be making use of the underlying Metaprogramming Library (MPL) on our projects. Odin is currently overhauling these libraries for his boost.tmp proposal, so we are waiting for them to stabilize."
CException,hold,libraries & frameworks,FALSE,"<a href=""github.com/ThrowTheSwitch/CException"">CException</a> is a lightweight exception handling library for the C programming language. We are stickign with C++ exceptions, but this is a viable option in the future if a lightweight exception library is needed."
ThreadX,adopt,platforms,FALSE,"<a href=""https://rtos.com"">ThreadX</a> is a reliable and proven RTOS. You can feel safe using it in your designs."
FreeRTOS,adopt,platforms,FALSE,"<a href=""https://www.freertos.org"">FreeRTOS</a> is reliable and widely-used RTOS. You can feel safe using it in your designs."
Nordic nRF5x,adopt,platforms,FALSE,"<a href=""http://www.nordicsemi.com"">Nordic Semiconductor</a>'s nRF51 and nRF52 families are widely-used and widely-acclaimed. Their documentation and SDK are high-quality, and the support built-in bluetooth stacks. If you need a low-powered Bluetooth project, look into this family."
Espressif ESP32,trial,platforms,FALSE,"Saket Vora introduced us to the Espressif ESP32 chipset, which features 512kB SRAM, qSPI supporting 16Mbit external flash, low deep sleep current, and a superb datasheet. We’re evaluating it for use with our embedded framework."
Maxim DARWIN MCUs,trial,platforms,FALSE,"Maxim recently announce a new <a href=""https://www.maximintegrated.com/en/products/microcontrollers/low-power-microcontrollers/meet-darwin.html"">Darwin MCU line</a>. We've enjoyed using their parts before, and we're curious to see how their MCUs work."
AVR,hold,platforms,FALSE,AVR may be on the way out. Best to avoid using it in any new designs.
Enable the Strictest Warning Settings,adopt,techniques,TRUE,"Enable the strictest warning settings on your project, and eliminate all warnings. --Wall -Wextra -pedantic for clang and GCC, /W4 for MSVC, and as many extra flags outside of those sets as possible."
Continuous Integration,adopt,techniques,FALSE,"Your projects should be built and tested on every commit. CI enables you to check the quality of a Pull Request prior to merging a change in. CI also enables tracking metrics across builds, such as warnings, TODOs, and build failures."
Architecture Decision Records,adopt,techniques,FALSE,"<a href=""https://embeddedartistry.com/blog/2018/4/5/documenting-architectural-decisions-within-our-repositories"">Architectural Decision Records</a> are a key form of documentation in our code bases. We document all major decisions along with 1) the background behind the decision, 2) alternatives that were considered, 3) tradeoffs of the decisions, and 4) rationale behind the decision."
Visual Modeling,adopt,techniques,FALSE,"Humans are visual creatures. We can share ideas more efficiently with others in a visual form. Complex relationships and interconnections are more easily understood in visual form rather than textual form. By quickly modeling our problems, we can iterate faster and come up with higher quality designs."
Test Driven Development (TDD),adopt,techniques,FALSE,"We've adopting Test Driven Development on our current project after attending <a href=""https://wingman-sw.com/training"">James Grenning's TDD training</a>. Results are favorable, especially in figuring out templated code for our C++ framework. We are impressed by how much of our embedded software we are able to test on a host machine."
Iterative Architecture,adopt,techniques,FALSE,"We believe that skipping up-front design work is a mistake. However, big up-front design is also a mistake. We are trying out an iterative architecture approach. We are focused on identifying the minimum viable architecture at each stage. As we continue with design and development, our architecture is updated to reflect problems we discover, the need for new components, and any other learnings."
Manage Documentation With Source,adopt,techniques,FALSE,"We want to manage as much documentation as we possibly can within the source repository for our projects. Our documentation can be linked to source, and source back to documents. We preserve a history of changes to our documentation, improving traceability and context. Documentation can be reviewed via Pull Requests similar to code."
COMET/RTE,trial,techniques,FALSE,"COMET/RTE is a design and development process for real-time embedded systems. Modeling is done using SysML, UML, MARTE. Design and development happen in an iterative process. We are using this process on our upcoming projects and evaluating its suitability for ongoing development."
Recording Project History,trial,techniques,FALSE,"We are trying out the <a href=""https://github.com/npryce/pottery"">pottery tool</a> to record project history in our repositories, similar to the Architecture Decision Record practice. Record significant events in a project with short twitter-like posts. Useful for ""archealogical"" efforts, where history can help future developers understand the project."